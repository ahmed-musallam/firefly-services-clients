/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Firefly API
 * REST API for Adobe Firefly for enterprise usage
 * OpenAPI spec version: V2
 */
export interface ImageGenerateRequest {
  /**
   * Text prompt for image generation.
   * @minLength 1
   * @maxLength 1024
   */
  prompt: string;
  /**
   * The model will avoid these words in the generated content.
   * @minLength 1
   * @maxLength 1024
   */
  negativePrompt?: string;
  contentClass?: ContentClass;
  /**
   * The number of variations to generate. If seeds array is specified, "n" does not have to be specified.
   * @minimum 1
   * @maximum 4
   */
  n?: number;
  /**
   * Array of seed(s) that will provide generation stability across multiple API calls. E.g. You can use the same seed to generate a similar image with different styles. If "n" is specified, the number of elements in the array must be equal to "n".
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  size?: ImageGenerateSize;
  photoSettings?: PhotoSettings;
  styles?: Styles;
  /**
   * Adjusts the overall intensity of your photo's existing visual characteristics
   * @minItems 2
   * @maxItems 10
   */
  visualIntensity?: number;
  /** A hyphen separated string, combining the ISO 639-1 language code and the ISO 3166-1 region, such as "en-US". When a locale is set, the prompt will be debiased to generated more relevant content to that region. If not specified, the locale will be auto detected, based on user's profile and Accept-Language header. */
  locale?: string;
}

/**
 * Successful operation
 */
export interface ImageGenerateRespons {
  /** Unique identifier indicating the model and pipeline version with which the images were generated. */
  version?: string;
  size?: ImageGenerateSize;
  outputs?: ImageOutput[];
}

/**
 * Dimensions of the generated image
  | Dimensions | Description | 
  | -----------| ----- |
  | { "width": 2048, "height": 2048} | Square (1:1) |
  | { "width": 2304, "height": 1792 } | Landscape (4:3) |
  | { "width": 1792, "height": 2304 } | Portrait (3:4) | 
  | { "width": 2688, "height": 1536 } | Widescreen (16:9) |

 */
export interface ImageGenerateSize {
  width?: number;
  height?: number;
}

/**
 * Advanced settings that will be applied if the specified or detected contentClass is photo
 */
export interface PhotoSettings {
  /**
   * Aperture
   * @minimum 1.2
   * @maximum 22
   */
  aperture?: number;
  /**
   * Shutter speed (seconds)
   * @minimum 0.0005
   * @maximum 10
   */
  shutterSpeed?: number;
  /**
   * Field of view (millimeters)
   * @minimum 14
   * @maximum 300
   */
  fieldOfView?: number;
}

/**
 * The content class guides the overall image theme and styles can be applied on top of each content type. If no content type is specified, it is auto-detected. 
  | Value  |  Description
  |:---------- |:------
  | photo      | Photorealistic style
  | art    | Artistic style

 */
export type ContentClass = (typeof ContentClass)[keyof typeof ContentClass];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentClass = {
  photo: 'photo',
  art: 'art',
} as const;

/**
 * Additional styles and reference image to be applied when generating variations.
 */
export interface Styles {
  /** List of style presets (See "Image Model Styles" under "Getting Started" guides) that are applied to generated content */
  presets?: unknown[];
  referenceImage?: StorageImage;
  /**
   * Sets the intensity at which to apply the styles
   * @minimum 1
   * @maximum 100
   */
  strength?: number;
}

/**
 * A valid Storage Item containing both an internal ID and a pre-signed URL
 */
export type ImageOutputImage = {
  /** Signed URL of the generated image.<br><strong>Note:</strong> This URL is valid for one hour. */
  presignedUrl?: string;
  /** Unique ID associated with the generated image.<br><strong>Note:</strong> The ID of the generated image will remain valid for 24 hours. */
  id?: string;
};

/**
 * Array of objects with details on output images
 */
export interface ImageOutput {
  /** A valid Storage Item containing both an internal ID and a pre-signed URL */
  image?: ImageOutputImage;
  /** seed used to generate the image */
  seed?: number;
}

/**
 * storage response
 */
export interface StorageImageResponse {
  /** Array of objects containing asset ID. */
  images?: StorageImage[];
}

/**
 * Source image
 */
export interface StorageImage {
  /** ID associated with the asset. The id will be valid for 7 days from the date of creation. Pre-signed URLs will be supported in the future. */
  id: string;
}

export interface ImageExpandRequest {
  /**
   * If provided, the expanded image will be rendered with content generated from prompt. If not provided, the expanded image will be rendered with content matching the existing style of the image.
   * @minLength 1
   * @maxLength 1024
   */
  prompt?: string;
  /**
   * The number of variations to generate. If seeds array is specified, "n" does not have to be specified.
   * @minimum 1
   * @maximum 4
   */
  n?: number;
  /**
   * Array of seed(s) that will provide generation stability across multiple API calls. E.g. You can use the same seed to generate a similar image with different styles. If "n" is specified, the number of elements in the array must be equal to "n".
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  image?: StorageImage;
  size?: ImageSize;
}

/**
 * gen-expand response
 */
export interface ImageGenerativeResponse {
  /** Unique identifier indicating the model and pipeline version with which the images were generated. */
  pipelineVersion?: string;
  /** If provided, the masked area will be rendered with content generated from prompt. If not provided, the masked area will be rendered with content matching the existing style of the source image. */
  prompt?: string;
  /** Flag to indicate if denied words were detected in the prompt. */
  promptHasDeniedWords?: boolean;
  /** Flag to indicate if artist names were detected in the prompt. */
  promptHasBlockedArtist?: boolean;
  size?: ImageSize;
  images?: ImageOutput[];
}

/**
 * Supported dimensions for the generated image.
  | Dimensions | Description | 
  | -----------| ----- |
  | { "width": 1024, "height": 1024} | Square (1:1) |
  | { "width": 1408, "height": 1024 } | Landscape (4:3) |
  | { "width": 1024, "height": 1408 } | Portrait (3:4) | 
  | { "width": 1792, "height": 1024 } | Widescreen (16:9) |

 */
export interface ImageSize {
  /**
   * @minimum 1024
   * @maximum 1792
   */
  width: number;
  /**
   * @minimum 1024
   * @maximum 1408
   */
  height: number;
}

export interface ImageFillRequest {
  /**
   * If provided, the masked area will be rendered with content generated from prompt. If not provided, the masked area will be rendered with content matching the existing style of the source image.
   * @minLength 1
   * @maxLength 1024
   */
  prompt?: string;
  /**
   * The number of variations to generate. If seeds array is specified, "n" does not have to be specified.
   * @minimum 1
   * @maximum 4
   */
  n?: number;
  /**
   * Array of seed(s) that will provide generation stability across multiple API calls. E.g. You can use the same seed to generate a similar image with different styles. If "n" is specified, the number of elements in the array must be equal to "n".
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  size: ImageSize;
  image: StorageImage;
  mask: ImageFillMask;
}

/**
 * Custom mask that will be filled with generated content
 */
export interface ImageFillMask {
  /** ID associated with the asset (generate this ID using the upload API). Pre-signed URLs will be supported in the future. */
  id: string;
}

export interface ErrorBody {
  /** Error message */
  message?: string;
  /** Associated error code */
  error_code?: string;
}

export type AcceptTypes = (typeof AcceptTypes)[keyof typeof AcceptTypes];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptTypes = {
  'application/json': 'application/json',
  'multipart/mixed': 'multipart/mixed',
} as const;

export type AcceptMimeTypes = (typeof AcceptMimeTypes)[keyof typeof AcceptMimeTypes];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptMimeTypes = {
  'image/jpeg': 'image/jpeg',
  'image/webp': 'image/webp',
  'image/png': 'image/png',
} as const;

export type XAcceptMimetypeParameter =
  (typeof XAcceptMimetypeParameter)[keyof typeof XAcceptMimetypeParameter];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XAcceptMimetypeParameter = {
  'image/jpeg': 'image/jpeg',
  'image/webp': 'image/webp',
  'image/png': 'image/png',
} as const;

export type XApiVariantParameter = (typeof XApiVariantParameter)[keyof typeof XApiVariantParameter];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XApiVariantParameter = {
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * Optional unique identifier that can be attached to an API request.
 */
export type XRequestIdParameter = string;

export type XGwImsScopeParameter = string;

/**
 * Optional identifier that can be provided to represent an unique browser session for an user.
 */
export type XSessionIdParameter = string;
