/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Firefly API
 * REST API for Adobe Firefly for enterprise usage
 * OpenAPI spec version: V3
 */
/**
 * An enumeration.
 */
export type AlignmentHorizontal = (typeof AlignmentHorizontal)[keyof typeof AlignmentHorizontal];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlignmentHorizontal = {
  center: 'center',
  left: 'left',
  right: 'right',
} as const;

/**
 * An enumeration.
 */
export type AlignmentVertical = (typeof AlignmentVertical)[keyof typeof AlignmentVertical];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlignmentVertical = {
  center: 'center',
  top: 'top',
  bottom: 'bottom',
} as const;

/**
 * The error within the error response.
 */
export interface ApiError {
  error_code: ColligoErrorCodeAsyncV3;
  message?: string;
  stack_trace?: string[];
  validation_errors?: ValidationErrorMessage[];
}

export interface AsyncAcceptResponseV3 {
  /** The URL to cancel the job. */
  cancelUrl: string;
  /** The ID of the job. */
  jobId: string;
  /** The URL to check the status of the job. */
  statusUrl: string;
}

export type AsyncApiErrorV3ErrorCode =
  | string
  | ColligoErrorCodeAsyncV3
  | ColliogAsyncStatusErrorCodeV3
  | ColligoAsyncCancelErrorCodeV3;

/**
 * The error within the error response.
 */
export interface AsyncApiErrorV3 {
  error_code?: AsyncApiErrorV3ErrorCode;
  jobId?: string;
  message?: string;
  status?: string;
  validation_errors?: ValidationErrorMessage[];
}

/**
 * The result of the job, if the job has completed.
 */
export type AsyncTaskResponseV3Result =
  | GenerateImagesResponseV3
  | GenerateSimilarImagesResponseV3
  | ExpandImageResponseV3
  | FillImageResponseV3
  | GenerateObjectCompositeResponseV3;

/**
 * The status of the job.
 */
export type AsyncTaskResponseV3Status =
  (typeof AsyncTaskResponseV3Status)[keyof typeof AsyncTaskResponseV3Status];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AsyncTaskResponseV3Status = {
  pending: 'pending',
  running: 'running',
  succeeded: 'succeeded',
  failed: 'failed',
  canceled: 'canceled',
} as const;

export interface AsyncTaskResponseV3 {
  /** The ID of async job. */
  jobId: string;
  progress?: number;
  /** The result of the job, if the job has completed. */
  result?: AsyncTaskResponseV3Result;
  /** The status of the job. */
  status: AsyncTaskResponseV3Status;
}

export interface BaseInputImageV3 {
  /** Source image that Firefly expands, fills or uses to generate similar images */
  source: PublicBinaryInputV3;
}

export interface BaseInputMaskV3 {
  /** Original mask image. */
  source: PublicBinaryInputV3;
}

export interface BodyExpandImagesV3Async {
  files: Blob[];
  request: ExpandImageRequestV3;
}

export interface BodyFillImagesV3Async {
  files: Blob[];
  request: FillImageRequestV3;
}

export interface BodyGenerateImagesV3Async {
  files: Blob[];
  request: GenerateImagesRequestV3;
}

export interface BodyGenerateObjectCompositeV3Async {
  files: Blob[];
  request: GenerateObjectCompositeRequestV3;
}

export interface BodyGenerateSimilarImagesV3Async {
  files: Blob[];
  request: GenerateSimilarImagesRequestV3;
}

/**
 * An enumeration.
 */
export type ColligoAsyncCancelErrorCodeV3 =
  (typeof ColligoAsyncCancelErrorCodeV3)[keyof typeof ColligoAsyncCancelErrorCodeV3];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ColligoAsyncCancelErrorCodeV3 = {
  job_timeout: 'job_timeout',
  job_completed: 'job_completed',
  unknown_job_id: 'unknown_job_id',
  job_already_canceled: 'job_already_canceled',
  job_cancel_failed: 'job_cancel_failed',
} as const;

/**
 * An enumeration.
 */
export type ColligoErrorCodeAsyncV3 =
  (typeof ColligoErrorCodeAsyncV3)[keyof typeof ColligoErrorCodeAsyncV3];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ColligoErrorCodeAsyncV3 = {
  validation_error: 'validation_error',
  runtime_error: 'runtime_error',
  timeout_error: 'timeout_error',
  rate_limited: 'rate_limited',
  access_error: 'access_error',
  invalid_content_type: 'invalid_content_type',
  empty_input_body: 'empty_input_body',
  bad_request: 'bad_request',
} as const;

/**
 * An enumeration.
 */
export type ColliogAsyncStatusErrorCodeV3 =
  (typeof ColliogAsyncStatusErrorCodeV3)[keyof typeof ColliogAsyncStatusErrorCodeV3];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ColliogAsyncStatusErrorCodeV3 = {
  unknown_job_id: 'unknown_job_id',
} as const;

/**
 * An enumeration.
 */
export type ContentClassV3 = (typeof ContentClassV3)[keyof typeof ContentClassV3];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentClassV3 = {
  photo: 'photo',
  art: 'art',
} as const;

export interface ExpandImageRequestV3 {
  /** The image to expand. You can either use a URL or an <code>uploadID</code> as the source for the image. Firefly only allows these listed domains for input URLs in the request: <ul> <li><code>amazonaws.com</code></li> <li><code>windows.net</code></li> <li><code>dropboxusercontent.com</code></li> <li><code>storage.googleapis.com</code></li> </ul> */
  image: InputImageV3;
  /** Mask image which will be used to expand the given image. */
  mask?: InputMaskV3;
  /**
   * Generate this number of variations. <code>numVariations</code> defaults to the number of seed images, or to 1 if you do not specify seeds.
   * @minimum 1
   * @maximum 4
   */
  numVariations?: number;
  /** The position of the source image after Firefly resizes it. The value describes the horizontal and vertical placement and dimensions of the image in the output. Note you cannot use placement for source images when you also apply a mask image. */
  placement?: Placement;
  /**
   * An optional text prompt up to 1024 characters. The longer the prompt the better Firefly performs.
   * @minLength 1
   * @maxLength 1024
   */
  prompt?: string;
  /**
   * Array of seed image IDs. These reference images help ensure consistent image generation across multiple API calls. For example, you can use the same seed to generate a similar image with different styles. If specified alongside with <code>numVariations</code>, the number of seeds must equal to <code>numVariations</code>.
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  /** The desired width and height for the final expanded image in pixels. The maximum size for the output images is 3999px by 3999px. */
  size?: Size;
}

export interface ExpandImageResponseV3 {
  /**
   * Each image ID.
   * @minItems 1
   */
  outputs: OutputImageV3[];
  /** When you provide size as input, this value is the same. */
  size: Size;
}

export interface FillImageRequestV3 {
  /** The image to expand. You can either use a URL or an <code>uploadID</code> as the source for the image. Firefly only allows these listed domains for input URLs in the request: <ul> <li><code>amazonaws.com</code></li> <li><code>windows.net</code></li> <li><code>dropboxusercontent.com</code></li> <li><code>storage.googleapis.com</code></li> </ul> */
  image: InputImageV3;
  /** Required. Selected areas of a background image that Firefly uses to fill the source image. */
  mask: InputMaskV3;
  /**
   * An optional text prompt up to 1024 characters. Avoid these characteristics in the generated image.
   * @maxLength 1024
   */
  negativePrompt?: string;
  /**
   * Generate this number of variations. <code>numVariations</code> defaults to the number of seed images, or to 1 if you do not specify seeds.
   * @minimum 1
   * @maximum 4
   */
  numVariations?: number;
  /**
   * An optional text prompt up to 1024 characters. The longer the prompt the better Firefly performs.
   * @minLength 1
   * @maxLength 1024
   */
  prompt?: string;
  /** A hyphen-separated string combining the ISO 639-1 language code and the ISO 3166-1 region, such as en-US. When a locale is set, the prompt will be biased to generate more relevant content for that region. The locale will be auto-detected if not specified based on your profile and the accepted language header. */
  promptBiasingLocaleCode?: string;
  /**
   * Array of seed image IDs. These reference images help ensure consistent image generation across multiple API calls. For example, you can use the same seed to generate a similar image with different styles. If specified alongside with <code>numVariations</code>, the number of seeds must equal to <code>numVariations</code>.
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  /** The desired width and height for the final expanded image in pixels. The supported sizes for the output images are: <ul> <li>Square (1:1) - width 2048px, height 2048px </li> <li>Square (1:1) - width 1024px, height 1024px </li> <li>Landscape (4:3)  - width 2304px, height 1792px </li> <li>Portrait (3:4)  - width 1792px, height 2304px</li> <li>Widescreen (16:9) - width 2688px, height 1536px </li> <li>(7:4)  - width 1344px, height 768px </li> <li>(9:7) - width 1152px, height 896px </li> <li>(7:9) - width 896px, height 1152px</li> </ul> */
  size?: Size;
}

export interface FillImageResponseV3 {
  /**
   * Each image ID.
   * @minItems 1
   */
  outputs: OutputImageV3[];
  /** When you provide size as input, this value is the same. */
  size: Size;
}

export interface GenerateImagesRequestV3 {
  /** Generate an image to being more photographic or more like art. Options include <code>photo</code> or <code>art</code>. */
  contentClass?: ContentClassV3;
  /**
   * Firefly tries to avoid generating anything you specify in this text prompt.
   * @maxLength 1024
   */
  negativePrompt?: string;
  /**
   * Generate this number of variations. <code>numVariations</code> defaults to the number of seed images, or to 1 if you do not specify seeds.
   * @minimum 1
   * @maximum 4
   */
  numVariations?: number;
  /**
   * An optional text prompt up to 1024 characters. The longer the prompt the better Firefly performs.
   * @minLength 1
   * @maxLength 1024
   */
  prompt: string;
  /** A hyphen-separated string combining the ISO 639-1 language code and the ISO 3166-1 region, such as en-US. When a locale is set, the prompt will be biased to generate more relevant content for that region. The locale will be auto-detected if not specified based on your profile and the accepted language header. */
  promptBiasingLocaleCode?: string;
  /**
   * Array of seed image IDs. These reference images help ensure consistent image generation across multiple API calls. For example, you can use the same seed to generate a similar image with different styles. If specified alongside with <code>numVariations</code>, the number of seeds must equal to <code>numVariations</code>.
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  /** The desired width and height for the final image in pixels. The supported sizes for the output images are: <ul> <li>Square (1:1) - width 2048px, height 2048px </li> <li>Square (1:1) - width 1024px, height 1024px </li> <li>Landscape (4:3)  - width 2304px, height 1792px </li> <li>Portrait (3:4)  - width 1792px, height 2304px</li> <li>Widescreen (16:9) - width 2688px, height 1536px </li> <li>(7:4)  - width 1344px, height 768px </li> <li>(9:7) - width 1152px, height 896px </li> <li>(7:9) - width 896px, height 1152px</li> </ul> */
  size?: Size;
  structure?: StructureReferenceV3;
  style?: StylesV3;
  /**
   * Adjusts the overall intensity of your photo's characteristic, such as contrast, shadow and hue.
   * @minimum 2
   * @maximum 10
   */
  visualIntensity?: number;
}

export interface GenerateImagesResponseV3 {
  /** Generate an image to being more photographic or more like art. Either <code>photo</code> or <code>art</code>. */
  contentClass?: ContentClassV3;
  /**
   * Each image ID.
   * @minItems 1
   */
  outputs: OutputImageV3[];
  /** The generated image does not comply to its full prompt if the prompt names artists that are blocked. */
  promptHasBlockedArtists?: boolean;
  /** The generated image does not comply to its full prompt if the prompt contains blocked words or descriptions. */
  promptHasDeniedWords?: boolean;
  size: Size;
}

export interface GenerateObjectCompositeRequestV3 {
  contentClass?: ContentClassV3;
  /** The image to expand. You can either use a URL or an <code>uploadID</code> as the source for the image. Firefly only allows these listed domains for input URLs in the request: <ul> <li><code>amazonaws.com</code></li> <li><code>windows.net</code></li> <li><code>dropboxusercontent.com</code></li> <li><code>storage.googleapis.com</code></li> </ul> */
  image: InputImageV3;
  /** Required. Selected areas of a background image that Firefly uses to fill the source image. */
  mask?: BaseInputMaskV3;
  /**
   * Generate this number of variations. Defaults to the number of seed images, or to 1 if you do not specify seeds.
   * @minimum 1
   * @maximum 4
   */
  numVariations?: number;
  /** The position of the source image after Firefly adjusts it. The value describes the horizontal and vertical placement and dimensions of the image in the output. Note you cannot use placement for source images when you also apply a mask image. */
  placement?: Placement;
  /**
   * An optional text prompt up to 1024 characters. The longer the prompt the better Firefly performs.
   * @minLength 1
   * @maxLength 1024
   */
  prompt: string;
  /**
   * Array of seed image IDs. These reference images help ensure consistent image generation across multiple API calls. If specified alongside with <code>numVariations</code>, the number of seeds must equal to <code>numVariations</code>.
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  /** The desired width and height for the final image in pixels. The supported sizes for the output images are: <ul> <li>Square (1:1) - width 2048px, height 2048px </li> <li>Square (1:1) - width 1024px, height 1024px </li> <li>Landscape (4:3)  - width 2304px, height 1792px </li> <li>Portrait (3:4)  - width 1792px, height 2304px</li> <li>Widescreen (16:9) - width 2688px, height 1536px </li> <li>(7:4)  - width 1344px, height 768px </li> <li>(9:7) - width 1152px, height 896px </li> <li>(7:9) - width 896px, height 1152px</li> </ul> */
  size?: Size;
  style?: StylesV3;
}

export interface GenerateObjectCompositeResponseV3 {
  contentClass?: ContentClassV3;
  /**
   * Each image ID.
   * @minItems 1
   */
  outputs: OutputImageV3[];
  /** When you provide size as input, this value is the same. */
  size: Size;
}

export interface GenerateSimilarImagesRequestV3 {
  /** Firefly will create similar variations. You can either use a URL or an <code>uploadID</code> as the source for the image. Firefly only allows these listed domains for input URLs in the request: <ul> <li><code>amazonaws.com</code></li> <li><code>windows.net</code></li> <li><code>dropboxusercontent.com</code></li> <li><code>storage.googleapis.com</code></li> </ul> */
  image: BaseInputImageV3;
  /**
   * Generate this number of variations. <code>numVariations</code> defaults to the number of seed images, or to 1 if you do not specify seeds.
   * @minimum 1
   * @maximum 4
   */
  numVariations?: number;
  /**
   * Array of seed image IDs. These reference images help ensure consistent image generation across multiple API calls. If specified alongside with <code>numVariations</code>, the number of seeds must equal to <code>numVariations</code>.
   * @minItems 1
   * @maxItems 4
   */
  seeds?: number[];
  /** The desired width and height for the final image in pixels. The supported sizes for the output images are: <ul> <li>Square (1:1) - width 2048px, height 2048px </li> <li>Square (1:1) - width 1024px, height 1024px </li> <li>Landscape (4:3)  - width 2304px, height 1792px </li> <li>Portrait (3:4)  - width 1792px, height 2304px</li> <li>Widescreen (16:9) - width 2688px, height 1536px </li> <li>(7:4)  - width 1344px, height 768px </li> <li>(9:7) - width 1152px, height 896px </li> <li>(7:9) - width 896px, height 1152px</li> </ul> */
  size?: Size;
}

export interface GenerateSimilarImagesResponseV3 {
  /**
   * Each image ID.
   * @minItems 1
   */
  outputs: OutputImageV3[];
  /** When you provide size as input, this value is the same. */
  size: Size;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface InputImageV3 {
  /**
   * This is a deprecated property. Use <code>mask</code> instead.
   * @deprecated
   */
  mask?: PublicBinaryInputV3;
  /** Source image that Firefly expands, fills or uses to generate similar images */
  source: PublicBinaryInputV3;
}

export interface InputMaskV3 {
  /** Invert mask is an optional boolen property, use <code>true</code> if you want take an image mask, invert it and apply it. */
  invert?: boolean;
  source: PublicBinaryInputV3;
}

export interface OutputImageV3 {
  image: PublicBinaryOutputV3;
  seed: number;
}

export interface Placement {
  /** Specify horizontal and vertical alignment. Possible values for horizontal=(center|left|right) and for vertical=(center|top|bottom). */
  alignment?: PlacementAlignment;
  /** Margin values in target size */
  inset?: PlacementInset;
}

export interface PlacementAlignment {
  horizontal?: AlignmentHorizontal;
  vertical?: AlignmentVertical;
}

export interface PlacementInset {
  /** The space between bottom edge of the result image and bottom edge of the placed object image. */
  bottom?: number;
  /** The space between left edge of the result image and left edge of the placed object image. */
  left?: number;
  /** The space between right edge of the result image and right edge of the placed object image. */
  right?: number;
  /** The space between top edge of the result image and top edge of the placed object image. */
  top?: number;
}

export interface PublicBinaryInputV3 {
  /** This is the uploadId from storage API response. */
  uploadId?: string;
  /**
   * Pre-signed URL of an uploaded file. You can either use a URL or an <code>uploadID</code> as the source for the image. Firefly only allows these listed domains for input URLs in the request: <ul> <li><code>amazonaws.com</code></li> <li><code>windows.net</code></li> <li><code>dropboxusercontent.com</code></li> <li><code>storage.googleapis.com</code></li> </ul>
   * @minLength 1
   * @maxLength 2083
   */
  url?: string;
}

export interface PublicBinaryOutputV3 {
  /**
   * This URL expires in one hour
   * @minLength 1
   * @maxLength 2083
   */
  url?: string;
}

export interface Size {
  /**
   * @minimum 1
   * @maximum 4096
   */
  height: number;
  /**
   * @minimum 1
   * @maximum 4096
   */
  width: number;
}

export interface StructureImageReferenceV3 {
  source?: PublicBinaryInputV3;
}

export interface StructureReferenceV3 {
  imageReference?: StructureImageReferenceV3;
  /**
   * Control how strictly Firefly adheres to the reference image when it generates the image variations. 0 means no adherence. 100 means full adherence.
   * @minimum 0
   * @maximum 100
   */
  strength?: number;
}

export interface StylesImageReferenceV3 {
  source?: PublicBinaryInputV3;
}

export interface StylesV3 {
  imageReference?: StylesImageReferenceV3;
  /** You can specify an ID for a style of image to generate */
  presets?: string[];
  /**
   * How strictly Firefly should adhere to the style you provide.
   * @maximum 100
   */
  strength?: number;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type ValidationErrorMessageCtx = { [key: string]: unknown };

export type ValidationErrorMessageLocItem = number | string;

export interface ValidationErrorMessage {
  ctx?: ValidationErrorMessageCtx;
  loc: ValidationErrorMessageLocItem[];
  msg: string;
  type: string;
}

export type JobResultV3PathParameters = {
  jobId: string;
};
export type JobResultV3200 = AsyncTaskResponseV3 | AsyncApiErrorV3;

export type CancelJobV3PathParameters = {
  jobId: string;
};
